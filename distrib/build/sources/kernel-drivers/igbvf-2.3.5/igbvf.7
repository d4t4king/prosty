.\" LICENSE
.\"
.\" This software program is released under the terms of a license agreement between you ('Licensee') and Intel.  Do not use or load this software or any associated materials (collectively, the 'Software') until you have carefully read the full terms and conditions of the LICENSE located in this software package.  By loading or using the Software, you agree to the terms of this Agreement.  If you do not agree with the terms of this Agreement, do not install or use the Software.
.\"
.\" * Other names and brands may be claimed as the property of others.
.\"
.TH igbvf 1 "January 5, 2012"

.SH NAME
igbvf \-This file describes the Linux* Base Driver for the Gigabit Family of Adapters.
.SH SYNOPSIS
.PD 0.4v
modprobe igbvf [<option>=<VAL1>,<VAL2>,...]
.PD 1v
.SH DESCRIPTION
This driver is intended for \fB2.6.18\fR or later kernels.  This driver includes support for Intel(R) Itanium(R)2-based systems.
.LP
This driver is only supported as a loadable module at this time.  Intel is not supplying patches against the kernel source to allow for static linking of the driver.  For questions related to hardware requirements, refer to the documentation supplied with your Intel adapter.  All hardware requirements listed apply to use with Linux.
.SH OPTIONS
The following optional parameters are used by entering them on the command line with the modprobe command.  
For example:
.IP
modprobe igbvf InterruptThrottleRate=16000,16000
.IP
.B InterruptThrottleRate
.IP
.B Valid Range: 
0,1,3,100-100000 (0=off, 1=dynamic, 3=dynamic conservative)
.IP
.B Default Value: 
3
This represents the maximum number of interrupts per second the controller generates.  InterruptThrottleRate is another setting used in interrupt moderation.  Dynamic mode uses a heuristic algorithm to adjust InterruptThrottleRate based on the current traffic load.
.IP
The default setting is configured to optimize interrupts for bulk 
throughput while keeping CPU utilization low.  However this setting may 
result in slower overall transfer speeds if network traffic consists 
mostly of small packets.  If this is the case, change this value to 0. 
.IP
Un-supported Adapters: InterruptThrottleRate is NOT supported by 82542, 82543 or 82544-based adapters.
.IP
.B NOTE: 
InterruptThrottleRate takes precedence over the TxAbsIntDelay and RxAbsIntDelay parameters.  Inother words, minimizing the receive and/or transmit absolute delays does not force the controller to generate more interrupts than what the Interrupt Throttle Rate allows.
.IP
See the section "InterruptThrottleRate" in README.
.IP
.SH JUMBO FRAMES
Jumbo Frames support is enabled by changing the MTU to a value larger than the default of 1500. Use the ifconfig command to increase the MTU size.  For example:
.IP
ifconfig ethx mtu 9000 up
.LP
.B NOTE: 
Using Jumbo frames at 10 or 100 Mbps is not supported and may result in poor performance or loss of link.
.LP
Some Intel gigabit adapters that support Jumbo Frames have a frame size limit of 9238 bytes, with a corresponding MTU size limit of 9216 bytes. 
.LP
See the section "Jumbo Frames" in README.
.SH ethtool
The driver utilizes the ethtool interface for driver configuration and diagnostics, as well as displaying statistical information.  ethtool version 1.8.1 or later is required for this functionality.
.LP
The latest release of ethtool can be found from http://ftp.kernel.org/pub/software/network/ethtool/.  The driver then must be recompiled in order to take advantage of the latest ethtool features.
.LP
ethtool 1.6 only supports a limited set of ethtool options.  Support for a more complete ethtool feature set can be enabled by upgrading ethtool to ethtool-1.8.1.  
.SH LRO
Large Receive Offload (LRO) is a technique for increasing inbound throughput of high-bandwidth network connections by reducing CPU overhead. It works by aggregating multiple incoming packets from asingle stream into a larger buffer before they are passed higher up the networking stack, thus reducing the number of packets that have to be processed. LRO combines multiple Ethernet frames into asingle receive in the stack, thereby potentially decreasing CPU utilization for receives.
.LP
NOTE: LRO requires 2.6.24 or newer kernel version. You also need to have inet_lro enabled via either the CONFIG_INET_LRO or CONFIG_INET_LRO_MODULE kernel config option. Additionally, if CONFIG_INET_LRO_MODULE is used, the inet_lro module needs to be loaded before the igbvf driver.
.LP
IGB_LRO is a compile time flag. The user can enable it at compile time to add support for LRO from the driver. The flag is used by adding CFLAGS_EXTRA="-DIGB_LRO" to the make file when it's being compiled. 
.IP
make CFLAGS_EXTRA="-DIGB_LRO" install
.LP
You can verify that the driver is using LRO by looking at these counters in ethtool:
.LP
lro_aggregated - count of total packets that were combined
.LP
lro_flushed - counts the number of packets flushed out of LRO
.LP
lro_no_desc - counts the number of times an LRO descriptor was not available for the LRO packet
.LP
NOTE: IPv6 and UDP are not supported by LRO.
.SH SUPPORT
For additional information, including supported adapters, building, and installation, see the README file included with the driver.
.LP
For general information, go to the Intel support website at:
.IP
.B http://support.intel.com
.LP
